{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","useState","isVisible","setVisible","sortBy","setSortBy","isReverse","setReverse","selectedValue","setSelectedValue","visibleGoods","filter","value","length","sort","a","b","reverse","reset","className","type","onClick","classNames","App__active","onChange","event","target","map","good","ReactDOM","render","document","getElementById"],"mappings":"0OAIMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAwGaC,EArGO,WACpB,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0CN,mBAAS,GAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KAIMC,EAAe,UAAIX,GAAiBY,QAAO,SAAAC,GAAK,OAAIA,EAAMC,QAAUL,KAE1E,OAAQJ,GACN,IAAK,QACHM,EAAaI,OACb,MACF,IAAK,SACHJ,EAAaI,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,OAASG,EAAEH,UAMzCP,GACFI,EAAaO,UAGf,IAAMC,EAAQ,WACZb,EAAU,IACVI,EAAiB,GACjBF,GAAW,IAQb,OACE,sBAAKY,UAAU,MAAf,UACE,uCACA,wBACEC,KAAK,SACLD,UAAU,cACVE,QAXe,WACnBH,IACAf,GAAYD,IAMV,SAKGA,EAAY,YAAc,cAE7B,uBACA,uBACCA,GACC,qCACE,wBACEkB,KAAK,SACLD,UAAWG,IAAW,cAAe,CAAEC,YAAajB,IACpDe,QAAS,kBAAMd,GAAYD,IAH7B,qBAOA,wBACEc,KAAK,SACLD,UAAWG,IAAW,cAAe,CAAEC,YAAwB,UAAXnB,IACpDiB,QAAS,kBAAMhB,EAAU,UAH3B,iCAOA,wBACEe,KAAK,SACLD,UAAU,cACVE,QAASH,EAHX,mBAOA,wBACEE,KAAK,SACLD,UAAWG,IAAW,cAAe,CAAEC,YAAwB,WAAXnB,IACpDiB,QAAS,kBAAMhB,EAAU,WAH3B,4BAOA,wBACEmB,SACE,SAACC,GAAD,OAAWhB,GAAkBgB,EAAMC,OAAOd,QAE5CO,UAAU,cACVP,MAAOJ,EALT,SAxEa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IA+EzBmB,KAAI,SAAAf,GAAK,OACrB,wBAAQA,MAAOA,EAAf,SAAuBA,SAI3B,6BACGF,EAAaiB,KAAI,SAAAC,GAAI,OACpB,6BAAgBA,GAAPA,eC1GvBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.49964921.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst App: React.FC = () => {\n  const [isVisible, setVisible] = useState(false);\n  const [sortBy, setSortBy] = useState('');\n  const [isReverse, setReverse] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(1);\n\n  const selectValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n  const visibleGoods = [...goodsFromServer].filter(value => value.length >= selectedValue);\n\n  switch (sortBy) {\n    case 'order':\n      visibleGoods.sort();\n      break;\n    case 'length':\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n    default:\n      break;\n  }\n\n  if (isReverse) {\n    visibleGoods.reverse();\n  }\n\n  const reset = () => {\n    setSortBy('');\n    setSelectedValue(1);\n    setReverse(false);\n  };\n\n  const showHideFunc = () => {\n    reset();\n    setVisible(!isVisible);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Goods</h1>\n      <button\n        type=\"button\"\n        className=\"App__button\"\n        onClick={showHideFunc}\n      >\n        {isVisible ? 'Hide List' : 'Show List'}\n      </button>\n      <br />\n      <br />\n      {isVisible && (\n        <>\n          <button\n            type=\"button\"\n            className={classNames('App__button', { App__active: isReverse })}\n            onClick={() => setReverse(!isReverse)}\n          >\n            Reverse\n          </button>\n          <button\n            type=\"button\"\n            className={classNames('App__button', { App__active: sortBy === 'order' })}\n            onClick={() => setSortBy('order')}\n          >\n            Sort alphabetically\n          </button>\n          <button\n            type=\"button\"\n            className=\"App__button\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n          <button\n            type=\"button\"\n            className={classNames('App__button', { App__active: sortBy === 'length' })}\n            onClick={() => setSortBy('length')}\n          >\n            Sort by length\n          </button>\n          <select\n            onChange={\n              (event) => setSelectedValue(+event.target.value)\n            }\n            className=\"App__button\"\n            value={selectedValue}\n          >\n            {selectValues.map(value => (\n              <option value={value}>{value}</option>\n            ))}\n          </select>\n\n          <ul>\n            {visibleGoods.map(good => (\n              <li key={good}>{good}</li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}