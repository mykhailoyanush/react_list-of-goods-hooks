{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","useState","isVisible","setVisible","sortBy","setSortBy","isReverse","reverse","selectedValue","setSelectedValue","visibleGoods","filter","value","length","sort","a","b","className","type","onClick","map","good","classNames","App__active","current","onChange","event","target","ReactDOM","render","document","getElementById"],"mappings":"0OAIMA,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAuGaC,EApGO,WACpB,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA6BJ,oBAAS,GAAtC,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0CN,mBAAS,GAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KAIMC,EAAe,UAAIX,GAAiBY,QAAO,SAAAC,GAAK,OAAIA,EAAMC,QAAUL,KAE1E,OAAQJ,GACN,IAAK,QACHM,EAAaI,OACb,MACF,IAAK,SACHJ,EAAaI,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEF,OAASG,EAAEH,UAMzCP,GACFI,EAAaH,UAaf,OACE,sBAAKU,UAAU,MAAf,UACE,wCACEf,GAEI,wBACEgB,KAAK,SACLD,UAAU,cACVE,QAAS,kBAAMhB,GAAW,IAH5B,mBAQLD,GACC,qCACE,6BACGQ,EAAaU,KAAI,SAAAC,GAAI,OACpB,6BAAgBA,GAAPA,QAGb,wBACEH,KAAK,SACLD,UAAWK,IAAW,cAAe,CAAEC,YAAajB,IACpDa,QAjCU,WAClBZ,GAAQ,SAAAiB,GAAO,OAAKA,MA6Bd,qBAOA,wBACEN,KAAK,SACLD,UAAWK,IAAW,cAAe,CAAEC,YAAwB,UAAXnB,IACpDe,QAAS,kBAAMd,EAAU,UAH3B,iCAOA,wBACEa,KAAK,SACLD,UAAU,cACVE,QA3CI,WACZd,EAAU,IACVI,EAAiB,GACjBF,GAAQ,IAqCF,mBAOA,wBACEW,KAAK,SACLD,UAAWK,IAAW,cAAe,CAAEC,YAAwB,WAAXnB,IACpDe,QAAS,kBAAMd,EAAU,WAH3B,4BAOA,wBACEoB,SACE,SAACC,GAAD,OAAWjB,GAAkBiB,EAAMC,OAAOf,QAE5CK,UAAU,cACVL,MAAOJ,EALT,SA7Ea,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAoFzBY,KAAI,SAAAR,GAAK,OACrB,wBAAQA,MAAOA,EAAf,SAAuBA,gBCzGrCgB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.540dcd6f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst App: React.FC = () => {\n  const [isVisible, setVisible] = useState(false);\n  const [sortBy, setSortBy] = useState('');\n  const [isReverse, reverse] = useState(false);\n  const [selectedValue, setSelectedValue] = useState(1);\n\n  const selectValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n  const visibleGoods = [...goodsFromServer].filter(value => value.length >= selectedValue);\n\n  switch (sortBy) {\n    case 'order':\n      visibleGoods.sort();\n      break;\n    case 'length':\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n    default:\n      break;\n  }\n\n  if (isReverse) {\n    visibleGoods.reverse();\n  }\n\n  const reverseFunc = () => {\n    reverse(current => !current);\n  };\n\n  const reset = () => {\n    setSortBy('');\n    setSelectedValue(1);\n    reverse(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Goods</h1>\n      {!isVisible\n          && (\n            <button\n              type=\"button\"\n              className=\"App__button\"\n              onClick={() => setVisible(true)}\n            >\n              Start\n            </button>\n          )}\n      {isVisible && (\n        <>\n          <ul>\n            {visibleGoods.map(good => (\n              <li key={good}>{good}</li>\n            ))}\n          </ul>\n          <button\n            type=\"button\"\n            className={classNames('App__button', { App__active: isReverse })}\n            onClick={reverseFunc}\n          >\n            Reverse\n          </button>\n          <button\n            type=\"button\"\n            className={classNames('App__button', { App__active: sortBy === 'order' })}\n            onClick={() => setSortBy('order')}\n          >\n            Sort alphabetically\n          </button>\n          <button\n            type=\"button\"\n            className=\"App__button\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n          <button\n            type=\"button\"\n            className={classNames('App__button', { App__active: sortBy === 'length' })}\n            onClick={() => setSortBy('length')}\n          >\n            Sort by length\n          </button>\n          <select\n            onChange={\n              (event) => setSelectedValue(+event.target.value)\n            }\n            className=\"App__button\"\n            value={selectedValue}\n          >\n            {selectValues.map(value => (\n              <option value={value}>{value}</option>\n            ))}\n          </select>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}